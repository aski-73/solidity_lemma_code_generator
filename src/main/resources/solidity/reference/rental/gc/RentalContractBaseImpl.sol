// SPDX-License-Identifier: Apache-2.0
pragma solidity >=0.8;

import "./RentalContractBase.sol";
import "./Common.sol";

contract RentalContractBaseImpl is RentalContractBase {
   // Generated by mevism
    string state = "START";

    // DataStructureFields of DML RentalContract Structure
    Owner owner;
    RentalObject object;
    Tenant public tenant;
    uint public endDate;

    // Generated by meivsm

    function handle(string memory input) public virtual payable {
        if (Common.isEqual(state, "START") && Common.isEqual(input, "init")) {
            state = "CREATED";
            //Entry Activity of new State
            initContract(Owner(payable(0x7F181DeF2E46196a239aC423a2b77e2E6A4d54a6), "andi"), RentalObject(1234, 0.5 ether));
        }
        else if (Common.isEqual(state, "CREATED") && Common.isEqual(input, "pay") && msg.value == 5 ether) {
            state = "ONGOING";
            //Entry Activity of new State
            grantAccess(Tenant(0x1023aE3D76272dA1916E680f55Bc53D56340B86c, "andi2"), block.timestamp + 30 days);
        }
        else if (Common.isEqual(state, "ONGOING") && Common.isEqual(input, "check") && block.timestamp >= endDate) {
            state = "CREATED";
            //Exit Activity of old State
            Common.transfer(5 ether, owner.blockchainAddress);
            //Entry Activity of new State
            owner = Owner(payable(0x7F181DeF2E46196a239aC423a2b77e2E6A4d54a6), "andi");
            object = RentalObject(1234, 0.5 ether);
        }
        else if (Common.isEqual(state, "CREATED") && Common.isEqual(input, "exit") && msg.sender == owner.blockchainAddress) {
            state = "END";
        }
    }

    // Base implementation of interface methods

    function initContract(Owner memory _owner, RentalObject memory _obj) public {
        // TODO implement me
    }

    function grantAccess(Tenant memory _tenant, uint _endDate) public {
        // TODO implement me

    }

    function exit() public {
        // TODO implement me
    }

    function myCustomFun() public {
        // TODO implement me
    }
}
