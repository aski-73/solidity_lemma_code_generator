import datatypes from "../common-shared/shared.data" as SharedData
import datatypes from "../common-shared/events.data" as ChargingStationManagementEvents
import microservices from "../command-side/chargingStationManagement.services" as ChargingStationManagementServiceCommand
import technology from "../../technology/Spring.technology" as Spring
import technology from "../../technology/Kafka.technology" as Kafka
import technology from "../../technology/Cqrs.technology" as CQRS

@technology(Spring)
@technology(Kafka)
@technology(CQRS)
@endpoints(Kafka::_protocols.kafka:"kafka-server1:9092";)
@Kafka::_aspects.BootstrapAddress("kafka-server1:9092")
@CQRS::_aspects.QuerySide("ChargingStationManagementMicroserviceQuery")
@Spring::_aspects.Application(name="ChargingStationManagementMicroserviceQuery", port=8072)
functional microservice  de.fhdo.puls.ChargingStationManagementQuery {
	
	required microservices {
		ChargingStationManagementServiceCommand::de.fhdo.puls.ChargingStationManagementCommand
	}
	
	@endpoints(Spring::_protocols.rest: "/resources/v1";)
	interface ParkingSpaceQueries {
		
		@endpoints(Spring::_protocols.rest: "/parkingSpace/id/{id}";)
		@Spring::_aspects.GetMapping
		public getParkingSpaceById(
			@Spring::_aspects.PathVariable(value="id")
			sync in id : string,
			@Spring::_aspects.ResponseEntity
			sync out parkingSpace : SharedData::ChargingStationManagement.ParkingSpace
		);
		
		@endpoints(Spring::_protocols.rest: "/parkingSpace/ids";) 
		@Spring::_aspects.GetMapping
		public getParkingSpacesByIds(
			@Spring::_aspects.RequestBody
			sync in ids : SharedData::ChargingStationManagement.IDs,
			@Spring::_aspects.ResponseEntity
			sync out parkingSpaces : SharedData::ChargingStationManagement.ParkingSpace
		);
		
		@endpoints(Spring::_protocols.rest: "/parkingSpaces";)
		@Spring::_aspects.GetMapping
		public getAllParkingSpaces(
			@Spring::_aspects.ResponseEntity
			sync out parkingSpaces : SharedData::ChargingStationManagement.ParkingSpace
		);
		
		@Kafka::_aspects.Participant(
			topic="parkingSpaceCreatedEvents",
			consumerGroup="parkingSpaceCreatedEvents"
		)
		receiveParkingSpaceCreatedEvents(
			async event :ChargingStationManagementEvents::ChargingStationManagementEvents.ParkingSpaceCreated
		);
	}
	
	
	
	@endpoints(Spring::_protocols.rest: "/resources/v1";)
	interface ElectrifiedParkingSpaceQueries {
		
		@endpoints(Spring::_protocols.rest: "/electrifiedParkingSpace/id/{id}";)
		@Spring::_aspects.GetMapping
		public getElectrifiedParkingSpaceById(
			@Spring::_aspects.PathVariable(value="id")
			sync in id : string,
			@Spring::_aspects.ResponseEntity
			sync out electrifiedParkingSpace : SharedData::ChargingStationManagement.ElectrifiedParkingSpace
		);
		
		@endpoints(Spring::_protocols.rest: "/electrifiedParkingSpace/ids";)
		@Spring::_aspects.GetMapping
		public getElectrifiedParkingSpacesByIds(
			@Spring::_aspects.RequestBody
			sync in ids : SharedData::ChargingStationManagement.IDs,
			@Spring::_aspects.ResponseEntity
			sync out electrifiedParkingSpaces : SharedData::ChargingStationManagement.ElectrifiedParkingSpace
		);
		
		@endpoints(Spring::_protocols.rest: "/electrifiedParkingSpaces";)
		@Spring::_aspects.GetMapping
		public getAllElectrifiedParkingSpaces(
			@Spring::_aspects.ResponseEntity
			sync out electrifiedParkingSpaces : SharedData::ChargingStationManagement.ElectrifiedParkingSpace
		);
		
		@Kafka::_aspects.Participant(
			topic="ElectrifiedParkingSpaceCreatedEvents",
			consumerGroup="ElectrifiedParkingSpaceCreatedEvents"
		)
		receiveElectrifiedParkingSpaceCreatedEvents(
			async event : ChargingStationManagementEvents::ChargingStationManagementEvents.ElectrifiedParkingSpaceCreated
		);
	}
}