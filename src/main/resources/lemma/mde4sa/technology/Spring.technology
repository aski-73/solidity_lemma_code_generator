technology Spring {
    protocols {
        sync rest data formats "application/json" default with format "application/json";
    }

    service aspects {
    	aspect Application<singleval> for microservices {
    		string name;
    		int port;
    	}
    	
    	aspect CrudRepository for types;
        aspect Transactional<singleval> for types;
       
        aspect PostMapping<singleval> for operations {
            selector(protocol = rest);
        }
    	
        aspect PutMapping<singleval> for operations {
            selector(protocol = rest);
        }
        
        aspect DeleteMapping<singleval> for operations {
            selector(protocol = rest);
        }
       
		 aspect GetMapping<singleval> for operations {
            selector(protocol = rest);
        }

        aspect PathVariable<singleval> for parameters {
            selector(protocol=rest, exchange_pattern = in);
            string value;
        }

        aspect RequestBody for parameters {
            selector(exchange_pattern = in);
        }

        aspect RequestParam for parameters {
            selector(exchange_pattern = in);
            string value;
            boolean required = false;
            string defaultValue = "";
        }
        
        aspect ResponseEntity<singleval> for parameters {
            selector(protocol = rest, exchange_pattern = out);
        }
          
       	aspect ResponseStatus for parameters {
            selector(exchange_pattern = out);
            string status <mandatory>;
        } 
         
        aspect Produces for operations {
            string value;
        }

        aspect Consums for operations {
            string value;
        }
        
        aspect Valid for parameters;
    }
}